<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <namespace name="S52"
             version="1.145"
             shared-library="libS52.so"
             c:identifier-prefixes="S52"
             c:symbol-prefixes="s52">
    <alias name="ObjectHandle" c:type="S52ObjectHandle">
      <doc xml:space="preserve">Type used for storing references to S52 objects, the S52ObjectHandle
is a fully opaque type without any public data members.</doc>
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <function name="LL2xy" c:identifier="S52_LL2xy">
      <doc xml:space="preserve">Convert longitude/latitude to X/Y (pixel - origin LL corner)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="longitude"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">degree (return X)</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="latitude"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">degree (return Y)</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <enumeration name="MarinerParameter" c:type="S52MarinerParameter">
      <member name="mar_error" value="0" c:identifier="S52_MAR_ERROR">
      </member>
      <member name="mar_show_text" value="1" c:identifier="S52_MAR_SHOW_TEXT">
      </member>
      <member name="mar_two_shades"
              value="2"
              c:identifier="S52_MAR_TWO_SHADES">
      </member>
      <member name="mar_safety_contour"
              value="3"
              c:identifier="S52_MAR_SAFETY_CONTOUR">
      </member>
      <member name="mar_safety_depth"
              value="4"
              c:identifier="S52_MAR_SAFETY_DEPTH">
      </member>
      <member name="mar_shallow_contour"
              value="5"
              c:identifier="S52_MAR_SHALLOW_CONTOUR">
      </member>
      <member name="mar_deep_contour"
              value="6"
              c:identifier="S52_MAR_DEEP_CONTOUR">
      </member>
      <member name="mar_shallow_pattern"
              value="7"
              c:identifier="S52_MAR_SHALLOW_PATTERN">
      </member>
      <member name="mar_ships_outline"
              value="8"
              c:identifier="S52_MAR_SHIPS_OUTLINE">
      </member>
      <member name="mar_distance_tags"
              value="9"
              c:identifier="S52_MAR_DISTANCE_TAGS">
      </member>
      <member name="mar_time_tags" value="10" c:identifier="S52_MAR_TIME_TAGS">
      </member>
      <member name="mar_full_sectors"
              value="11"
              c:identifier="S52_MAR_FULL_SECTORS">
      </member>
      <member name="mar_symbolized_bnd"
              value="12"
              c:identifier="S52_MAR_SYMBOLIZED_BND">
      </member>
      <member name="mar_symplified_pnt"
              value="13"
              c:identifier="S52_MAR_SYMPLIFIED_PNT">
      </member>
      <member name="mar_disp_category"
              value="14"
              c:identifier="S52_MAR_DISP_CATEGORY">
      </member>
      <member name="mar_color_palette"
              value="15"
              c:identifier="S52_MAR_COLOR_PALETTE">
      </member>
      <member name="mar_vecper" value="16" c:identifier="S52_MAR_VECPER">
      </member>
      <member name="mar_vecmrk" value="17" c:identifier="S52_MAR_VECMRK">
      </member>
      <member name="mar_vecstb" value="18" c:identifier="S52_MAR_VECSTB">
      </member>
      <member name="mar_headng_line"
              value="19"
              c:identifier="S52_MAR_HEADNG_LINE">
      </member>
      <member name="mar_beam_brg_nm"
              value="20"
              c:identifier="S52_MAR_BEAM_BRG_NM">
      </member>
      <member name="mar_font_soundg"
              value="21"
              c:identifier="S52_MAR_FONT_SOUNDG">
      </member>
      <member name="mar_datum_offset"
              value="22"
              c:identifier="S52_MAR_DATUM_OFFSET">
      </member>
      <member name="mar_scamin" value="23" c:identifier="S52_MAR_SCAMIN">
      </member>
      <member name="mar_antialias" value="24" c:identifier="S52_MAR_ANTIALIAS">
      </member>
      <member name="mar_quapnt01" value="25" c:identifier="S52_MAR_QUAPNT01">
      </member>
      <member name="mar_disp_overlap"
              value="26"
              c:identifier="S52_MAR_DISP_OVERLAP">
      </member>
      <member name="mar_disp_layer_last"
              value="27"
              c:identifier="S52_MAR_DISP_LAYER_LAST">
      </member>
      <member name="mar_rot_buoy_light"
              value="28"
              c:identifier="S52_MAR_ROT_BUOY_LIGHT">
      </member>
      <member name="mar_disp_crsr_pos"
              value="29"
              c:identifier="S52_MAR_DISP_CRSR_POS">
      </member>
      <member name="mar_disp_graticule"
              value="30"
              c:identifier="S52_MAR_DISP_GRATICULE">
      </member>
      <member name="mar_disp_wholin"
              value="31"
              c:identifier="S52_MAR_DISP_WHOLIN">
      </member>
      <member name="mar_disp_legend"
              value="32"
              c:identifier="S52_MAR_DISP_LEGEND">
      </member>
      <member name="cmd_wrd_filter"
              value="33"
              c:identifier="S52_CMD_WRD_FILTER">
      </member>
      <member name="mar_dotpitch_mm_x"
              value="34"
              c:identifier="S52_MAR_DOTPITCH_MM_X">
      </member>
      <member name="mar_dotpitch_mm_y"
              value="35"
              c:identifier="S52_MAR_DOTPITCH_MM_Y">
      </member>
      <member name="mar_disp_calib"
              value="36"
              c:identifier="S52_MAR_DISP_CALIB">
      </member>
      <member name="mar_disp_drgare_pattern"
              value="37"
              c:identifier="S52_MAR_DISP_DRGARE_PATTERN">
      </member>
      <member name="mar_disp_nodata_layer"
              value="38"
              c:identifier="S52_MAR_DISP_NODATA_LAYER">
      </member>
      <member name="mar_disp_vessel_delay"
              value="39"
              c:identifier="S52_MAR_DISP_VESSEL_DELAY">
      </member>
      <member name="mar_disp_afterglow"
              value="40"
              c:identifier="S52_MAR_DISP_AFTERGLOW">
      </member>
      <member name="mar_disp_centroids"
              value="41"
              c:identifier="S52_MAR_DISP_CENTROIDS">
      </member>
      <member name="mar_disp_world"
              value="42"
              c:identifier="S52_MAR_DISP_WORLD">
      </member>
      <member name="mar_disp_rnd_ln_end"
              value="43"
              c:identifier="S52_MAR_DISP_RND_LN_END">
      </member>
      <member name="mar_disp_vrmebl_label"
              value="44"
              c:identifier="S52_MAR_DISP_VRMEBL_LABEL">
      </member>
      <member name="mar_disp_radar_layer"
              value="45"
              c:identifier="S52_MAR_DISP_RADAR_LAYER">
      </member>
      <member name="mar_num" value="46" c:identifier="S52_MAR_NUM">
      </member>
    </enumeration>
    <enumeration name="ObjectType" c:type="S52ObjectType">
      <member name="_meta" value="0" c:identifier="S52__META">
      </member>
      <member name="areas" value="1" c:identifier="S52_AREAS">
      </member>
      <member name="lines" value="2" c:identifier="S52_LINES">
      </member>
      <member name="point" value="3" c:identifier="S52_POINT">
      </member>
      <member name="n_obj" value="4" c:identifier="S52_N_OBJ">
      </member>
    </enumeration>
    <callback name="RADAR_cb" c:type="S52_RADAR_cb">
      <return-value transfer-ownership="none">
        <type name="guint8" c:type="unsigned char*"/>
      </return-value>
      <parameters>
        <parameter name="cLat" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="cLng" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="rNM" transfer-ownership="none">
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="_CMD_WRD_FILTER_t" c:type="S52_CMD_WRD_FILTER_t">
      <member name="sy" value="1" c:identifier="S52_CMD_WRD_FILTER_SY">
      </member>
      <member name="ls" value="2" c:identifier="S52_CMD_WRD_FILTER_LS">
      </member>
      <member name="lc" value="4" c:identifier="S52_CMD_WRD_FILTER_LC">
      </member>
      <member name="ac" value="8" c:identifier="S52_CMD_WRD_FILTER_AC">
      </member>
      <member name="ap" value="16" c:identifier="S52_CMD_WRD_FILTER_AP">
      </member>
      <member name="tx" value="32" c:identifier="S52_CMD_WRD_FILTER_TX">
      </member>
    </bitfield>
    <bitfield name="_MAR_DISP_CATEGORY_t" c:type="S52_MAR_DISP_CATEGORY_t">
      <member name="category_base"
              value="0"
              c:identifier="S52_MAR_DISP_CATEGORY_BASE">
      </member>
      <member name="category_std"
              value="1"
              c:identifier="S52_MAR_DISP_CATEGORY_STD">
      </member>
      <member name="category_other"
              value="2"
              c:identifier="S52_MAR_DISP_CATEGORY_OTHER">
      </member>
      <member name="category_select"
              value="4"
              c:identifier="S52_MAR_DISP_CATEGORY_SELECT">
      </member>
      <member name="layer_last_none"
              value="8"
              c:identifier="S52_MAR_DISP_LAYER_LAST_NONE">
      </member>
      <member name="layer_last_std"
              value="16"
              c:identifier="S52_MAR_DISP_LAYER_LAST_STD">
      </member>
      <member name="layer_last_other"
              value="32"
              c:identifier="S52_MAR_DISP_LAYER_LAST_OTHER">
      </member>
      <member name="layer_last_select"
              value="64"
              c:identifier="S52_MAR_DISP_LAYER_LAST_SELECT">
      </member>
    </bitfield>
    <function name="delMarObj" c:identifier="S52_delMarObj">
      <doc xml:space="preserve">Delete ressources in libS52 for this S52_obj.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">NULL if S52_obj was deleted successfully, if call fail return the handle</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="objH" transfer-ownership="none">
          <doc xml:space="preserve">addressed S52ObjectHandle</doc>
          <type name="ObjectHandle" c:type="S52ObjectHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="done" c:identifier="S52_done">
      <doc xml:space="preserve">Free up all ressources</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="doneCell" c:identifier="S52_doneCell">
      <doc xml:space="preserve">Free up all ressources used by @encPath</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="encPath" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw" c:identifier="S52_draw">
      <doc xml:space="preserve">Draw S57 object (cell) on layer 0-8</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="drawBlit" c:identifier="S52_drawBlit">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="scale_x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="scale_y" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="scale_z" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="north" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="drawLast" c:identifier="S52_drawLast">
      <doc xml:space="preserve">Draw layer 9 (last) stuff that change all the time (ex AIS)
fast update</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="drawLayer" c:identifier="S52_drawLayer">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="drawStr" c:identifier="S52_drawStr">
      <doc xml:space="preserve">For reference S52 UI color name:
"UINFD", "UINFF", "UIBCK", "UIAFD",
"UINFR", "UINFG", "UINFO", "UINFB",
"UINFM", "UIBDR", "UIAFF"

Note: client must register EGL callback via S52_setEGLcb()
to handle the framebuffer (or handle FB by hand)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="pixels_x" transfer-ownership="none">
          <doc xml:space="preserve">origin LL corner</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="pixels_y" transfer-ownership="none">
          <doc xml:space="preserve">origin LL corner</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="colorName" transfer-ownership="none">
          <doc xml:space="preserve">S52 UI color name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="bsize" transfer-ownership="none">
          <doc xml:space="preserve">body size (1..)</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dumpS57IDPixels" c:identifier="S52_dumpS57IDPixels">
      <doc xml:space="preserve">Dump (@width x @height) pixels to PNG @toFilename centered on @S57ID of the current framebuffer
Note: changing the size of the viewport require a call to draw() before this call
(ie size of framebuffer must be in sync with the size of the viewport).

If @S57ID is zero (0) then the whole framebuffer is dumped (ie @width and @height are ignore)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="toFilename" transfer-ownership="none">
          <doc xml:space="preserve">PNG file (with full path) to dump pixels to</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="S57ID" transfer-ownership="none">
          <doc xml:space="preserve">internal ID of object (return via S52_getObjList() or S52_pickAt())</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve">width of dump in pixels (max viewport width)</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve">height of dump in pixels (max viewport height)</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="getAttList" c:identifier="S52_getAttList">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="S57ID" transfer-ownership="none">
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="getCellExtent" c:identifier="S52_getCellExtent">
      <doc xml:space="preserve">Cell extent; South, West, North, East
if @filename is NULL then return the extent of all cells loaded</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none" allow-none="1">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="S"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">latitude  (deg)</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="W"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">longitude (deg)</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="N"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">latitude  (deg)</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="E"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">longitude (deg)</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="getCellNameList" c:identifier="S52_getCellNameList">
      <doc xml:space="preserve">List of cells name loaded
WARNING: *BUG*, str can be dandling, so raw C call must save
the string before calling libS52 again</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">NULL if call fail</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="getMarObjH"
              c:identifier="S52_getMarObjH"
              introspectable="0">
      <return-value>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="S57ID" transfer-ownership="none">
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="getMarinerParam" c:identifier="S52_getMarinerParam">
      <doc xml:space="preserve">Get the value of the Mariners' Parameter @paramID (global variables/system wide)

Invalid @paramID will return INFINITY, the value of S52_MAR_ERROR</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">value</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="paramID" transfer-ownership="none">
          <doc xml:space="preserve">ID of Mariners' Object Parameter</doc>
          <type name="MarinerParameter" c:type="S52MarinerParameter"/>
        </parameter>
      </parameters>
    </function>
    <function name="getObjList" c:identifier="S52_getObjList">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="cellName" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="className" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="getPLibNameList" c:identifier="S52_getPLibNameList">
      <doc xml:space="preserve">List of PLib name loaded delimited by ','
WARNING: the return str can be dandling, so raw C call must save
the string before calling libS52 again</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">string</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="getPalettesNameList"
              c:identifier="S52_getPalettesNameList">
      <doc xml:space="preserve">List of palettes name loaded separated by ','.
WARNING: *BUG*, str can be dandling, so raw C call must save
the string before calling libS52 again</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">NULL if call fail</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="getRGB" c:identifier="S52_getRGB">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="colorName" transfer-ownership="none">
          <doc xml:space="preserve">S52 color name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="R"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">red,   [0..255]</doc>
          <type name="guint8" c:type="unsigned char*"/>
        </parameter>
        <parameter name="G"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">green, [0..255]</doc>
          <type name="guint8" c:type="unsigned char*"/>
        </parameter>
        <parameter name="B"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">blue,  [0..255]</doc>
          <type name="guint8" c:type="unsigned char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="getS57ClassList" c:identifier="S52_getS57ClassList">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="cellName" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="getS57ObjClassSupp" c:identifier="S52_getS57ObjClassSupp">
      <doc xml:space="preserve">get Object class suppression</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if suppression is ON else FALSE, error -1 (DISPLAYBASE or invalid className)</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="className" transfer-ownership="none">
          <doc xml:space="preserve">name of the classe of S57 object</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="getTextDisp" c:identifier="S52_getTextDisp">
      <doc xml:space="preserve">Get the @state of text display priority at @dispPrioIdx</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">state, TRUE / FALSE / -1 (fail)</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="dispPrioIdx" transfer-ownership="none">
          <doc xml:space="preserve">display priority index  (0..99)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="getView" c:identifier="S52_getView">
      <doc xml:space="preserve">Get center of view / where to place the camera on model</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="cLat"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">latitude of the center of the view (deg)  [- 90 .. + 90]</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="cLon"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">longitude of the center of the view (deg) [-180 .. +180]</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="rNM"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">range (radius of view (NM), &lt;0 unchange</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="north"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">angle from north (deg),     &lt;0 unchange</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="init" c:identifier="S52_init">
      <doc xml:space="preserve">Initialize libS52, install SIGINT handler to abort drawing (Ctrl-C)
xrandr can be used if framework doesn't do it (ie Clutter)
Note: the ratio screen mmw/h and screen mmw/h is used to compute initial DOTPITCH
      any number will do if system screen size call can't handle it
      overide with S52_MAR_DOTPITCH_MM_X / Y after init().
Note: screen_pixels_w, int screen_pixels_h are used to setViewPort to full-screen</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="screen_pixels_w" transfer-ownership="none">
          <doc xml:space="preserve">use to compute DOTPITCH X</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="screen_pixels_h" transfer-ownership="none">
          <doc xml:space="preserve">use to compute DOTPITCH Y</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="screen_mm_w" transfer-ownership="none">
          <doc xml:space="preserve">use to compute DOTPITCH X</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="screen_mm_h" transfer-ownership="none">
          <doc xml:space="preserve">use to compute DOTPITCH Y</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="log_cb"
                   transfer-ownership="none"
                   allow-none="1"
                   scope="call">
          <doc xml:space="preserve">callback</doc>
          <type name="log_cb" c:type="S52_log_cb"/>
        </parameter>
      </parameters>
    </function>
    <function name="loadCell" c:identifier="S52_loadCell">
      <doc xml:space="preserve">if @encPath is NULL look for label 'CHART' in s52.cfg
if @encPath is a path load all S57 base cell + update
if @loadObject_cb is NULL then S52_loadObject() is executed

Note: the first call to S52_loadCell() will set the Mercator Projection Latitude
      and Longitude of any futher S52_loadCell() call(s)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="encPath" transfer-ownership="none" allow-none="1">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="loadObject_cb"
                   transfer-ownership="none"
                   allow-none="1"
                   scope="call">
          <type name="loadObject_cb" c:type="S52_loadObject_cb"/>
        </parameter>
      </parameters>
    </function>
    <function name="loadObject" c:identifier="S52_loadObject">
      <doc xml:space="preserve">Can be called more than once (in theorie)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="objname" transfer-ownership="none">
          <doc xml:space="preserve">name of S57 object (same as layer name)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="feature" transfer-ownership="none">
          <doc xml:space="preserve">S57 object feature passed from GDAL/OGR</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <callback name="loadObject_cb" c:type="S52_loadObject_cb">
      <doc xml:space="preserve">This callback provide a way to manipulate each S57 object before
they are inserted into the scenegraph (via S52_loadObject())</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="objname" transfer-ownership="none">
          <doc xml:space="preserve">name of S57 object (same as layer name)</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="feature" transfer-ownership="none">
          <doc xml:space="preserve">S57 object feature passed from GDAL/OGR (OGRFeatureH)</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="loadPLib" c:identifier="S52_loadPLib">
      <doc xml:space="preserve">If @plibName is NULL look for label 'PLIB' in s52.cfg

WARNING: after loadPLib() all S52ObjectHandle are invalid, so user must
reload them to get new S52ObjectHandle.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="plibName" transfer-ownership="none" allow-none="1">
          <doc xml:space="preserve">name or path+name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <callback name="log_cb" c:type="S52_log_cb">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="newCLRLIN" c:identifier="S52_newCLRLIN">
      <doc xml:space="preserve">new S52_obj "Clearing Line"
'clrlin': CS(CLRLIN--)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an handle to a new S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="catclr" transfer-ownership="none">
          <doc xml:space="preserve">0 - undefined, 1 - NMT (not more than), 2 - NLT (not less than)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="latBegin" transfer-ownership="none">
          <doc xml:space="preserve">lat of LEGLIN beginning (degdecimal)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lonBegin" transfer-ownership="none">
          <doc xml:space="preserve">lon of LEGLIN beginning (degdecimal)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="latEnd" transfer-ownership="none">
          <doc xml:space="preserve">lat of LEGLIN ending    (degdecimal)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lonEnd" transfer-ownership="none">
          <doc xml:space="preserve">lon of LEGLIN ending    (degdecimal)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="newCSYMB" c:identifier="S52_newCSYMB">
      <doc xml:space="preserve">Create SCALEB10, SCALEB11, NORTHAR1, UNITMTR1, CHKSYM01, Calibration Symb.
note that the S52ObjectHandle of these S52 object are kept inside libS52.
Calibration Symb. are turn ON / OFF via S52_MAR_DISP_CALIB</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="newLEGLIN" c:identifier="S52_newLEGLIN">
      <doc xml:space="preserve">new S52_obj "Leg Line" segment
'leglin': CS(LEGLIN--)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an handle to a new S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="select" transfer-ownership="none">
          <doc xml:space="preserve">Selection: 0 - undefined, 1 - planned, 2 - alternate</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="plnspd" transfer-ownership="none">
          <doc xml:space="preserve">planned speed (0.0 for no speed label)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="wholinDist" transfer-ownership="none">
          <doc xml:space="preserve">distance of the 'wholin' (wheel-over-line) from End in NM</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="latBegin" transfer-ownership="none">
          <doc xml:space="preserve">lat of LEGLIN beginning (degdecimal)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lonBegin" transfer-ownership="none">
          <doc xml:space="preserve">lon of LEGLIN beginning (degdecimal)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="latEnd" transfer-ownership="none">
          <doc xml:space="preserve">lat of LEGLIN ending    (degdecimal)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="lonEnd" transfer-ownership="none">
          <doc xml:space="preserve">lon of LEGLIN ending    (degdecimal)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="previousLEGLIN"
                   transfer-ownership="none"
                   allow-none="1">
          <doc xml:space="preserve">handle to the previous LEGLIN, used to draw 'wholin' and/or curve</doc>
          <type name="ObjectHandle" c:type="S52ObjectHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="newMarObj" c:identifier="S52_newMarObj">
      <doc xml:space="preserve">Create new S52_obj - Basic Call.
All other call of the form S52_new*() are a specialisation of this one.

NOTE: LIFO stack so 'cursor' should be created first to be drawn on top.

In 'listAttVal', in S52 attribute name (ex: att1) of 6 lower case letters are reserve
for Mariners' Object. Lower case attribute name starting with an unserscore ('_')
are reserve for internal libS52 needs.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an handle to a new S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="plibObjName" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="objType" transfer-ownership="none">
          <doc xml:space="preserve">S52ObjectType</doc>
          <type name="ObjectType" c:type="S52ObjectType"/>
        </parameter>
        <parameter name="xyznbrmax" transfer-ownership="none">
          <doc xml:space="preserve">maximum number of xyz (point)(see S52_pushPosition())</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="xyz" transfer-ownership="none" allow-none="1">
          <type name="gpointer" c:type="double*"/>
        </parameter>
        <parameter name="listAttVal" transfer-ownership="none">
          <doc xml:space="preserve">format:  "att1:val1,att2:val2,..."
                                       OR "[att1,val1,att2,al2,...]" (JSON array)</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="newOWNSHP" c:identifier="S52_newOWNSHP">
      <doc xml:space="preserve">new S52_obj "Own Ship"
'ownshp': CS(OWNSHP--)
Note: if OWNSHP has allready been created then an other call will
return the handle of the first OWNSHIP call.
Note: text priority of @label is 75</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an handle to S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="label" transfer-ownership="none" allow-none="1">
          <doc xml:space="preserve">for example Ship's name or MMSI or NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="newPASTRK" c:identifier="S52_newPASTRK">
      <doc xml:space="preserve">'pastrk': CS(PASTRK--)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an handle to a new S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="catpst" transfer-ownership="none">
          <doc xml:space="preserve">Category of past track: 0 - undefined, 1 - primary, 2 - secondary</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="xyznbrmax" transfer-ownership="none">
          <doc xml:space="preserve">maximum number of PASTRK positon (point)</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="newVESSEL" c:identifier="S52_newVESSEL">
      <doc xml:space="preserve">'vessel': CS(VESSEL--) ARPA &amp; AIS
Note: text priority of @label is 76</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an handle to a new S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="vesrce" transfer-ownership="none">
          <doc xml:space="preserve">vessel report source: 1 - ARPA target, 2 - AIS vessel report, 3 - VTS report</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="label" transfer-ownership="none" allow-none="1">
          <doc xml:space="preserve">NULL or a string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="newVRMEBL" c:identifier="S52_newVRMEBL">
      <doc xml:space="preserve">'vrmebl' CS(VRMEBL--)
Note: if @ebl is TRUE then an "ebline" is created else "vrmark"</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an handle to a new S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="vrm" transfer-ownership="none">
          <doc xml:space="preserve">Variable Range Marker TRUE/FALSE</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ebl" transfer-ownership="none">
          <doc xml:space="preserve">Electronic Bearing Line TRUE/FALSE</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="normalLineStyle" transfer-ownership="none">
          <doc xml:space="preserve">TRUE  - normal line style, FALSE - alternate line style</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="setOrigin" transfer-ownership="none">
          <doc xml:space="preserve">TRUE  - will setup a freely movable VRMEBL origin,
                        FALSE - centered on ownshp or screen center if no ownshp</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="pickAt" c:identifier="S52_pickAt">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="pixels_x" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="pixels_y" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="pushPosition" c:identifier="S52_pushPosition">
      <doc xml:space="preserve">Push a position on a FIFO stack. The size of the stack is one for object of type S52_POINT.
For object of type S52_LINES and S52_AREAS the size of the stack is set via 'xyznbrmax'.
S52_AREAS are expected to have the same first and last point (as any S57 area).

'data' is used to display time (hh.mm) if the object is PASTRK.
If the object is VESSEL or OWNSHP then 'data' is the heading.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the handle to S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="objH" transfer-ownership="none">
          <doc xml:space="preserve">addressed S52ObjectHandle</doc>
          <type name="ObjectHandle" c:type="S52ObjectHandle"/>
        </parameter>
        <parameter name="latitude" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="longitude" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="setDimension" c:identifier="S52_setDimension">
      <doc xml:space="preserve">conning position - for AIS this is the antenna position</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the handle to S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="objH" transfer-ownership="none">
          <doc xml:space="preserve">addressed S52ObjectHandle</doc>
          <type name="ObjectHandle" c:type="S52ObjectHandle"/>
        </parameter>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve">dist form foward</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve">dist from aft       (a + b = lenght)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="c" transfer-ownership="none">
          <doc xml:space="preserve">dist from port</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="d" transfer-ownership="none">
          <doc xml:space="preserve">dist from starboard (c + d = beam)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="setEGLcb" c:identifier="S52_setEGLcb" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="eglBeg" transfer-ownership="none">
          <type c:type="EGL_cb"/>
        </parameter>
        <parameter name="eglEnd" transfer-ownership="none">
          <type c:type="EGL_cb"/>
        </parameter>
        <parameter name="EGLctx" transfer-ownership="none">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="setMarinerParam" c:identifier="S52_setMarinerParam">
      <doc xml:space="preserve">Set the value of the global variables @paramID
used by Mariners' Object</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="paramID" transfer-ownership="none">
          <doc xml:space="preserve">ID of Mariners' Object Parameter</doc>
          <type name="MarinerParameter" c:type="S52MarinerParameter"/>
        </parameter>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve">value</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="setRADARCallBack" c:identifier="S52_setRADARCallBack">
      <doc xml:space="preserve">S52_RADAR_cb: return alpha texture data
Signal that libS52 is at RADAR layer in the layer's sequence in S52_draw()
(compile with S52_USE_RADAR)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="cb"
                   transfer-ownership="none"
                   allow-none="1"
                   scope="call">
          <type name="RADAR_cb" c:type="S52_RADAR_cb"/>
        </parameter>
        <parameter name="texRadius" transfer-ownership="none">
          <doc xml:space="preserve">texture radius (pixels), if 0 free cb</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="setRGB" c:identifier="S52_setRGB">
      <doc xml:space="preserve">Overright the current RGB for @colorName of current palette</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="colorName" transfer-ownership="none">
          <doc xml:space="preserve">S52 color name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="R" transfer-ownership="none">
          <doc xml:space="preserve">red,   [0..255]</doc>
          <type name="guint8" c:type="unsigned char"/>
        </parameter>
        <parameter name="G" transfer-ownership="none">
          <doc xml:space="preserve">green, [0..255]</doc>
          <type name="guint8" c:type="unsigned char"/>
        </parameter>
        <parameter name="B" transfer-ownership="none">
          <doc xml:space="preserve">blue,  [0..255]</doc>
          <type name="guint8" c:type="unsigned char"/>
        </parameter>
      </parameters>
    </function>
    <function name="setS57ObjClassSupp" c:identifier="S52_setS57ObjClassSupp">
      <doc xml:space="preserve">set suppression (TRUE/FALSE) from display of all Objects of the S57 class @className</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if call successfull else FALSE, error -1 (DISPLAYBASE or invalid className)</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="className" transfer-ownership="none">
          <doc xml:space="preserve">name of the S57 classe</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">TRUE / FALSE</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="setTextDisp" c:identifier="S52_setTextDisp">
      <doc xml:space="preserve">Set text @state display priority starting from @dispPrioIdx
to @count index.

75 - OWNSHP label
76 - VESSEL label</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="dispPrioIdx" transfer-ownership="none">
          <doc xml:space="preserve">display priority index  (0..99)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:space="preserve">count</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:space="preserve">display state (TRUE/FALSE)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="setVESSELlabel" c:identifier="S52_setVESSELlabel">
      <doc xml:space="preserve">(re) set label
Note: text priority of @newLabel is 76</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the handle to S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="objH" transfer-ownership="none">
          <doc xml:space="preserve">addressed S52ObjectHandle</doc>
          <type name="ObjectHandle" c:type="S52ObjectHandle"/>
        </parameter>
        <parameter name="newLabel" transfer-ownership="none" allow-none="1">
          <doc xml:space="preserve">NULL or a string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="setVESSELstate" c:identifier="S52_setVESSELstate">
      <doc xml:space="preserve">"undefined" mean that the current value of the variable of this objH is unafected

Note: experimental @vestat = 3, compile with S52_USE_SYM_VESSEL_DNGHL, symb in PLAUX_00</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">an handle to a new S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="objH" transfer-ownership="none">
          <doc xml:space="preserve">addressed S52ObjectHandle</doc>
          <type name="ObjectHandle" c:type="S52ObjectHandle"/>
        </parameter>
        <parameter name="vesselSelect" transfer-ownership="none">
          <doc xml:space="preserve">0 - undefined, 1 - selected (ON) and follow, 2 - de-seltected (OFF), (ie bracket symbol on vessel),</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="vestat" transfer-ownership="none">
          <doc xml:space="preserve">0 - undefined, 1 - AIS active, 2 - AIS sleeping, 3 - AIS active, close quarter (red)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="vesselTurn" transfer-ownership="none">
          <doc xml:space="preserve">Turn rate is encoded as follows: [from gpsd doc]
        0       - not turning
        1..126  - turning right at up to 708 degrees per minute or higher
       -1..-126 - turning left  at up to 708 degrees per minute or higher
        127     - turning right at more than 5deg/30s (No TI available)
       -127     - turning left  at more than 5deg/30s (No TI available)
        128     - (80 hex) indicates no turn information available (default)
        129     - undefined</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="setVRMEBL" c:identifier="S52_setVRMEBL">
      <doc xml:space="preserve">The first (x,y) will set the origine in the case that this object was
created (new) with the parameter @setOrigin set to TRUE</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the handle to S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="objH" transfer-ownership="none">
          <doc xml:space="preserve">addressed S52ObjectHandle</doc>
          <type name="ObjectHandle" c:type="S52ObjectHandle"/>
        </parameter>
        <parameter name="pixels_x" transfer-ownership="none">
          <doc xml:space="preserve">origin LL corner</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="pixels_y" transfer-ownership="none">
          <doc xml:space="preserve">origin LL corner</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="brg" transfer-ownership="none">
          <doc xml:space="preserve">bearing from origine (FIXME: no offset from S52_setDimension())</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="rge" transfer-ownership="none">
          <doc xml:space="preserve">range   from origine (FIXME: no offset from S52_setDimension())</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="setVector" c:identifier="S52_setVector">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the handle to S52_obj or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="objH" transfer-ownership="none">
          <doc xml:space="preserve">addressed S52ObjectHandle</doc>
          <type name="ObjectHandle" c:type="S52ObjectHandle"/>
        </parameter>
        <parameter name="vecstb" transfer-ownership="none">
          <doc xml:space="preserve">0 - none, 1 - ground, 2 - water</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="course" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="speed" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="setView" c:identifier="S52_setView">
      <doc xml:space="preserve">Set center of view / where to place the camera on model</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="cLat" transfer-ownership="none">
          <doc xml:space="preserve">latitude of the center of the view (deg)  [- 90 .. + 90]</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="cLon" transfer-ownership="none">
          <doc xml:space="preserve">longitude of the center of the view (deg) [-180 .. +180]</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="rNM" transfer-ownership="none">
          <doc xml:space="preserve">range (radius of view (NM), &lt;0 unchange</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="north" transfer-ownership="none">
          <doc xml:space="preserve">angle from north (deg),     &lt;0 unchange</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="setViewPort" c:identifier="S52_setViewPort">
      <doc xml:space="preserve">Call this if viewPort change (ex: going full screen)
 From WebGL (OpenGL ES 2.0) spec:
 Rationale: automatically setting the viewport will interfere with applications
  that set it manually. Applications are expected to use onresize handlers to
  respond to changes in size of the canvas and set the OpenGL viewport in turn.
So this call is simply a wrapper on 'void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)'

Use this call in conjuction with S52_setView() and S52_draw() to setup a magnifying glass
or an overview</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="pixels_x" transfer-ownership="none">
          <doc xml:space="preserve">origine LL corner</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="pixels_y" transfer-ownership="none">
          <doc xml:space="preserve">origine LL corner</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="pixels_width" transfer-ownership="none">
          <doc xml:space="preserve">viewport width in pixels</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="pixels_height" transfer-ownership="none">
          <doc xml:space="preserve">viewport height in pixels</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="toggleDispMarObj" c:identifier="S52_toggleDispMarObj">
      <doc xml:space="preserve">Initially Mariners' Object are ON (ie display of object NOT suppressed)
FIXME: maybe add toggleDispMarObj ON / OFF for clarity as toggleObjClass..</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the S52_obj handle or NULL if call fail</doc>
        <type name="ObjectHandle" c:type="S52ObjectHandle"/>
      </return-value>
      <parameters>
        <parameter name="objH" transfer-ownership="none">
          <doc xml:space="preserve">addressed S52ObjectHandle</doc>
          <type name="ObjectHandle" c:type="S52ObjectHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="toggleObjClass" c:identifier="S52_toggleObjClass">
      <doc xml:space="preserve">Toggle display all S57 objects of class @className.

NOTE: S52_MAR_DISP_CATEGORY must be set to SELECT (3).</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if transition ON to OFF or OFF to ON, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="className" transfer-ownership="none">
          <doc xml:space="preserve">name of the classe of S57 object</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="toggleObjClassOFF" c:identifier="S52_toggleObjClassOFF">
      <doc xml:space="preserve">display Object class (suppression OFF.)

NOTE: S52_MAR_DISP_CATEGORY must be set to SELECT (3).</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if transition ON to OFF, else FALSE, error -1 (DISPLAYBASE or invalid className)</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="className" transfer-ownership="none">
          <doc xml:space="preserve">name of the classe of S57 object</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="toggleObjClassON" c:identifier="S52_toggleObjClassON">
      <doc xml:space="preserve">supress display of Object class (suppression ON.)

NOTE: S52_MAR_DISP_CATEGORY must be set to SELECT (3).</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if transition OFF to ON, else FALSE, error -1 (DISPLAYBASE or invalid className)</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="className" transfer-ownership="none">
          <doc xml:space="preserve">name of the classe of S57 object</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="version" c:identifier="S52_version">
      <doc xml:space="preserve">Internal Version.

Note: can be called before S52_init()</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">String with the version of libS52 and the '#define' used to build it</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="xy2LL" c:identifier="S52_xy2LL">
      <doc xml:space="preserve">Convert pixel X/Y to longitude/latitude (deg)</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, else FALSE</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="pixels_x"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">origin LL corner (return longitude)</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
        <parameter name="pixels_y"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">origin LL corner (return latitude)</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
